{"componentChunkName":"component---src-templates-section-js","path":"/cuda","result":{"data":{"mdx":{"slug":"cuda/cuda","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CUDA Programming Cheatsheet\",\n  \"date\": \"2020-07-09\",\n  \"slug\": \"cuda\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"CUDA Programming Cheatsheet\"), mdx(\"h2\", null, \"Definitions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"thread\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"block\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"warp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"grid\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"device\"), \" is the GPU (accelerator).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"host\"), \" is the CPU.\")), mdx(\"p\", null, \"Set the number of blocks from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N/TPB\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(N + TPB - 1)/TPB\"), \" to ensure that the number of blocks is rounded up (which will guarantee that no index is left uncomputed).\"), mdx(\"h2\", null, \"Reductions\"), mdx(\"div\", {\n    className: \"mermaid\"\n  }, \"graph LR; a[\\\"Entire work (X)\\\"]; b[\\\"Block 1 (N threads)\\\"]; c[\\\"Block 2 (N threads)\\\"]; d[\\\"Block ... (N threads)\\\"]; e[\\\"Block X/N (N threads)\\\"]; a-->b; a-->c; a-->d; a-->e; rb[\\\"Block 1 reduce (shared mem)\\\"]; rc[\\\"Block 2 reduce\\\"]; rd[\\\"Block ... reduce\\\"]; re[\\\"Block X/N reduce\\\"]; b-->rb; c-->rc; d-->rd; e-->re; final[\\\"Serial reduce (atomic)\\\"]; rb-->final; rc-->final; rd-->final; re-->final;\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"CUDA Programming Cheatsheet","slug":"cuda"}}},"pageContext":{"slug":"cuda/cuda"}}}